name: CI

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: gradle

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      - name: Create .env file
        run: |
          echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" > .env
          echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
          echo "MYSQL_DATABASE=study" >> .env
          echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env

      - name: Start services
        run: docker compose up --build -d

      - name: Wait for services
        run: |
          timeout 60 bash -c 'until docker compose exec -T db mysqladmin ping --silent; do sleep 3; done'
          sleep 30

      - name: Health check
        run: |
          # 포트만 체크 - 앱이 실행되고 있으면 성공
          timeout 10 bash -c 'until nc -z localhost 8080; do sleep 1; done'
          echo "✅ Spring Boot is running on port 8080"

      - name: Build and tag Docker image for deployment
        if: github.ref == 'refs/heads/main'
        run: |
          docker build -t spring-app:${{ github.sha }} .
          docker build -t spring-app:latest .

      - name: Deploy to AWS EC2
        if: github.ref == 'refs/heads/main'
        run: |
          # TODO: AWS 배포 로직
          echo "Ready for deployment"

      - name: Cleanup
        if: always()
        run: docker compose down -v
  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Changing to app directory..."
            cd /home/ubuntu/your-app-directory || exit 1
            
            echo "Pulling latest code..."
            git pull origin main
            
            echo "Creating .env file..."
            echo "MYSQL_USER=${{ secrets.MYSQL_USER }}" > .env
            echo "MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}" >> .env
            echo "MYSQL_DATABASE=study" >> .env
            echo "MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}" >> .env
            
            echo "Building and starting Docker containers..."
            docker compose up --build -d --force-recreate
            
            echo "Deployment finished successfully!"
