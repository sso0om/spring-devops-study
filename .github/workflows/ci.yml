name: CI/CD Pipeline

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: gradle

      - name: Grant execute permission for Gradle wrapper
        run: chmod +x ./gradlew

      - name: Build with Gradle
        run: ./gradlew build --no-daemon

      - name: Login to Docker Hub
        if: github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        if: github.ref == 'refs/heads/main'
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/spring-devops-study:latest .
          docker push ${{ secrets.DOCKER_USERNAME }}/spring-devops-study:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # 1. 이전 컨테이너 중지 및 삭제 (오류 방지)
            docker-compose down || true
            docker rm -f spring-app mysql-1 || true
            
            # 2. 새로운 docker-compose.yml 파일 생성
            cat <<EOF > docker-compose.yml
            version: '3.8'
            
            services:
              db:
                image: mysql:8
                container_name: mysql-1
                environment:
                  MYSQL_USER: \${MYSQL_USER}
                  MYSQL_PASSWORD: \${MYSQL_PASSWORD}
                  MYSQL_DATABASE: study
                  MYSQL_ROOT_PASSWORD: \${MYSQL_ROOT_PASSWORD}
                ports:
                  - "3306:3306"
                volumes:
                  - mysql_data:/var/lib/mysql
                healthcheck:
                  test: ["CMD", "mysqladmin", "ping", "-u", "\${MYSQL_USER}", "-p\${MYSQL_PASSWORD}"]
                  interval: 10s
                  timeout: 5s
                  retries: 5
            
              app:
                image: ${{ secrets.DOCKER_USERNAME }}/spring-devops-study:latest
                container_name: spring-app
                ports:
                  - "8080:8080"
                depends_on:
                  db:
                    condition: service_healthy
                environment:
                  SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/study?useSSL=false&allowPublicKeyRetrieval=true
                  SPRING_DATASOURCE_USERNAME: \${MYSQL_USER}
                  SPRING_DATASOURCE_PASSWORD: \${MYSQL_PASSWORD}
                  SPRING_JPA_HIBERNATE_DDL_AUTO: update
            
            volumes:
              mysql_data:
            EOF
            
            # 3. 새로운 Docker 이미지 다운로드
            docker pull ${{ secrets.DOCKER_USERNAME }}/spring-devops-study:latest
            
            # 4. .env 파일이 존재하는지 확인하고 Docker Compose 실행
            if [ -f .env ]; then
              docker-compose up -d
            else
              echo "Error: .env file not found. Please create one on the EC2 instance."
              exit 1
            fi
